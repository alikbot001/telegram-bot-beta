import { Telegraf, Markup } from 'telegraf';
import { Low, JSONFile } from 'lowdb';
import schedule from 'node-schedule';
import dayjs from 'dayjs';

// --- –í–∞—à —Ç–æ–∫–µ–Ω ---
const BOT_TOKEN = '7804238972:AAEeZ-Dgjj1dBbjdUsoFn93R8O08B1ja3ig';

// --- –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã (–ø—Ä–∏–º–µ—Ä) ---
const MOTIVATION_QUOTES = [
    "–í–µ–ª–∏–∫–∏–µ –¥–µ–ª–∞ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –º–∞–ª–æ–≥–æ.",
    "–°–µ–∫—Ä–µ—Ç –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤–ø–µ—Ä–µ–¥ ‚Äî –Ω–∞—á–∞—Ç—å.",
    "–î–æ—Ä–æ–≥—É –æ—Å–∏–ª–∏—Ç –∏–¥—É—â–∏–π.",
    "–¢–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ –∏–¥–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ, —É–∑–Ω–∞–µ—Ç, –∫–∞–∫ –¥–∞–ª–µ–∫–æ –º–æ–∂–Ω–æ –∑–∞–π—Ç–∏.",
    "–°–º–µ–ª–æ—Å—Ç—å ‚Äî —ç—Ç–æ –Ω–∞—á–∞–ª–æ –¥–µ–π—Å—Ç–≤–∏—è, —É–¥–∞—á–∞ ‚Äî –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ.",
];

// --- –ß–µ–∫–ª–∏—Å—Ç—ã –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ ---
const WEEKLY_CHECKLIST = [
    {
        title: "–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö ‚Äî –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –≤–ª–∏—è–Ω–∏—è (~60 –º–∏–Ω)",
        tasks: [
            "–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ/–ª–µ–∫—Ü–∏—é –æ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏—è—Ö (30 –º–∏–Ω)",
            "–ü–æ–¥—É–º–∞—Ç—å: –≥–¥–µ —è —Å —ç—Ç–∏–º —Å—Ç–∞–ª–∫–∏–≤–∞–ª—Å—è? (10 –º–∏–Ω)",
            "–ó–∞–ø–∏—Å–∞—Ç—å: –≤ —á—ë–º —è —É–º–µ—é –≤–ª–∏—è—Ç—å? (10 –º–∏–Ω)",
            "–ú–µ–¥–∏—Ç–∞—Ü–∏—è –∏–ª–∏ –¥—ã—Ö–∞–Ω–∏–µ (–ø–æ –∂–µ–ª–∞–Ω–∏—é, 5 –º–∏–Ω)",
        ]
    },
    {
        title: "–í–¢–û–†–ù–ò–ö ‚Äî –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –º—ã—à–ª–µ–Ω–∏–µ (~60‚Äì75 –º–∏–Ω)",
        tasks: [
            "–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ / —á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é –ø—Ä–æ –º—ã—à–ª–µ–Ω–∏–µ –±–æ–≥–∞—Ç—Å—Ç–≤–∞ (30 –º–∏–Ω)",
            "–û—Ç–≤–µ—Ç–∏—Ç—å –ø–∏—Å—å–º–µ–Ω–Ω–æ: –∫–∞–∫ –±—ã —è –ø–æ—Ç—Ä–∞—Ç–∏–ª 10.000‚ÇΩ? (15 –º–∏–Ω)",
            "–ü–æ–¥—É–º–∞—Ç—å: —á—Ç–æ —è –¥–µ–ª–∞—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å –¥–µ–Ω—å–≥–∞–º–∏? (5 –º–∏–Ω)",
            "–ß–µ–∫-–∏–Ω: –∫–∞–∫ —è —Å–µ–±—è —á—É–≤—Å—Ç–≤—É—é —Å–µ–π—á–∞—Å? (5 –º–∏–Ω)",
        ]
    },
    {
        title: "–°–†–ï–î–ê ‚Äî –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ —Ä–µ—á—å (~60 –º–∏–Ω)",
        tasks: [
            "–°–º–æ—Ç—Ä–µ—Ç—å TED / –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å —Ö–∞—Ä–∏–∑–º–æ–π (20 –º–∏–Ω)",
            "–ó–∞–ø–∏—Å–∞—Ç—å —Å–µ–±—è: –∫–∞–∫ –ø—Ä–æ—à–ª–∏ 3 –¥–Ω—è (2 –º–∏–Ω)",
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å: —á—Ç–æ –∑–≤—É—á–∞–ª–æ —É–≤–µ—Ä–µ–Ω–Ω–æ? (10 –º–∏–Ω)",
            "–í—ã—É—á–∏—Ç—å 5 —Å–∏–ª—å–Ω—ã—Ö —Å–ª–æ–≤",
            "–ü—Ä–æ–≥–æ–≤–æ—Ä–∏—Ç—å: ¬´–ß—Ç–æ —è –¥—É–º–∞—é –æ —Å–µ–±–µ¬ª (5 –º–∏–Ω)",
        ]
    },
    {
        title: "–ß–ï–¢–í–ï–†–ì ‚Äî –ö–æ–¥–∏–Ω–≥ / –ª–æ–≥–∏–∫–∞ (~60‚Äì75 –º–∏–Ω)",
        tasks: [
            "–ü—Ä–æ–π—Ç–∏ –º–∏–Ω–∏-—É—Ä–æ–∫ –ø–æ Python / –≤–∏–∑—É–∞–ª—å–Ω–æ–º—É –∫–æ–¥–∏–Ω–≥—É (30 –º–∏–Ω)",
            "–ó–∞–ø–∏—Å–∞—Ç—å, —á—Ç–æ –ø–æ–Ω—è–ª (10 –º–∏–Ω)",
            "–ü–æ–¥—É–º–∞—Ç—å: —á—Ç–æ –±—ã —Ö–æ—Ç–µ–ª —Å–æ–∑–¥–∞—Ç—å? (10 –º–∏–Ω)",
            "–ü—Ä–æ–≥—É–ª–∫–∞ –∏–ª–∏ —á–∞–π (–æ—Ç–¥—ã—Ö)",
        ]
    },
    {
        title: "–ü–Ø–¢–ù–ò–¶–ê ‚Äî –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –∏ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑ (~60 –º–∏–Ω)",
        tasks: [
            "–ú–µ–¥–∏—Ç–∞—Ü–∏—è –ø–æ–¥ —ç–º–±–∏–µ–Ω—Ç / —Ç–∏—Ö–∞—è –º—É–∑—ã–∫–∞ (10 –º–∏–Ω)",
            "–ù–∞–ø–∏—Å–∞—Ç—å: ‚Äî —á—Ç–æ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª? ‚Äî –≥–¥–µ –±—ã–ª —á–µ—Å—Ç–µ–Ω —Å —Å–æ–±–æ–π? ‚Äî –≥–¥–µ –æ—Å—É–¥–∏–ª —Å–µ–±—è ‚Äî –∏ –∑–∞—á–µ–º?",
            "–ü—Ä–æ–≥—É–ª–∫–∞ –∏–ª–∏ –æ—Ç–¥—ã—Ö –≤ —Ç–∏—à–∏–Ω–µ (15 –º–∏–Ω)",
            "–ú—É–∑—ã–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ª–µ—á–∏—Ç (15 –º–∏–Ω)",
        ]
    },
    {
        title: "–°–£–ë–ë–û–¢–ê ‚Äî –≠—Å—Ç–µ—Ç–∏–∫–∞ –∏ –≤–∫—É—Å (~60‚Äì75 –º–∏–Ω)",
        tasks: [
            "–°–º–æ—Ç—Ä–µ—Ç—å –∫—Ä–∞—Å–∏–≤–æ–µ –≤–∏–¥–µ–æ / –º–æ–Ω—Ç–∞–∂ / –¥–∏–∑–∞–π–Ω (15 –º–∏–Ω)",
            "–ü–æ–¥—É–º–∞—Ç—å: —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å? (10 –º–∏–Ω)",
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å 3 –∏–¥–µ–∏ (–≤ Telegram/–ø–∞–ø–∫—É)",
            "–ü—Ä–∏–¥—É–º–∞—Ç—å 1 –∏–¥–µ—é –¥–ª—è TikTok/–∫–∞–Ω–∞–ª–∞",
            "–ü–∏—Å–∞—Ç—å –∫–∞–∫ —Ö–æ—á–µ—Ç—Å—è (—Ä—É—á–∫–æ–π / –≤ –∑–∞–º–µ—Ç–∫–∞—Ö)",
        ]
    },
    {
        title: "–í–û–°–ö–†–ï–°–ï–ù–¨–ï ‚Äî –†–µ—Ñ–ª–µ–∫—Å–∏—è –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ (~60 –º–∏–Ω)",
        tasks: [
            "–ù–∞–ø–∏—Å–∞—Ç—å: ‚Äî —á—Ç–æ —è –ø–æ–Ω—è–ª –æ —Å–µ–±–µ –∑–∞ –Ω–µ–¥–µ–ª—é? ‚Äî —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å, —á—Ç–æ –±—ã–ª–æ —Ç—Ä—É–¥–Ω–æ?",
            "–ü–∏—Å—å–º–æ —Å–µ–±–µ: ‚Äî ¬´–Ø –≥–æ—Ä–∂—É—Å—å‚Ä¶¬ª ‚Äî ¬´–Ø —Å—Ç–∞—Ä–∞—é—Å—å‚Ä¶¬ª ‚Äî ¬´–Ø –ø—Ä–æ—â–∞—é —Å–µ–±–µ‚Ä¶¬ª",
            "–û–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω—ã / —Ä–µ—à–∏—Ç—å: ¬´–ó–∞–≤—Ç—Ä–∞ –Ω–∞—á–Ω—É —Å –ø—Ä–æ—Å—Ç–æ–≥–æ¬ª",
        ]
    }
];

const ALT_LINE = "üí° –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ 1 –ø—Ä–æ—Å—Ç—É—é –≤–µ—â—å –∏–∑ —Å–ø–∏—Å–∫–∞ ‚Äî –¥–∞–∂–µ —ç—Ç–æ —É–∂–µ —à–∞–≥!";

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã ---
const adapter = new JSONFile('db.json');
const db = new Low(adapter);

async function initDB() {
    await db.read();
    if (!db.data) db.data = { users: {} };
    await db.write();
}

// --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (ReplyKeyboard) ---
const mainMenu = Markup.keyboard([
    ['üìã –ß–µ–∫-–ª–∏—Å—Ç', 'üìà –ü—Ä–æ–≥—Ä–µ—Å—Å'],
    ['üí° –ú–æ—Ç–∏–≤–∞—Ü–∏—è', '‚ÑπÔ∏è –ü–æ–º–æ—â—å'],
    ['‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å']
]).resize();

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
function getTodayKey() {
    return dayjs().format('YYYY-MM-DD');
}
function getWeekKey() {
    return dayjs().format('YYYY-[W]WW');
}
function getWeekdayIndex() {
    let idx = dayjs().day();
    return idx === 0 ? 6 : idx - 1;
}
function getChecklistText(idx) {
    const day = WEEKLY_CHECKLIST[idx];
    let text = `‚úÖ ${day.title}\n`;
    day.tasks.forEach((t, i) => text += `‚Ä¢ ${t}\n`);
    text += ALT_LINE;
    return text;
}
function getChecklistButtons(userId, idx) {
    const todayKey = getTodayKey();
    const user = db.data.users[userId] ||= {};
    user[todayKey] ||= { done: Array(WEEKLY_CHECKLIST[idx].tasks.length).fill(false) };
    return Markup.inlineKeyboard(
        WEEKLY_CHECKLIST[idx].tasks.map((t, i) => [
            Markup.button.callback(
                (user[todayKey].done[i] ? '‚úÖ' : '‚¨ú') + ' ' + (i + 1),
                `done_${i}`
            ),
            Markup.button.callback('üîÅ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', `skip_${i}`)
        ])
    );
}
function getProgressText(userId) {
    const user = db.data.users[userId] || {};
    let week = {};
    Object.keys(user).forEach(date => {
        if (date.match(/^\d{4}-\d{2}-\d{2}$/)) {
            const w = dayjs(date).format('YYYY-[W]WW');
            week[w] ||= [];
            week[w].push(user[date]);
        }
    });
    const thisWeek = week[getWeekKey()] || [];
    let daysDone = 0, daysPartial = 0, totalTasks = 0, totalDone = 0;
    thisWeek.forEach(day => {
        const done = day.done.filter(Boolean).length;
        totalTasks += day.done.length;
        totalDone += done;
        if (done === day.done.length) daysDone++;
        else if (done > 0) daysPartial++;
    });
    let percent = totalTasks ? Math.round(totalDone / totalTasks * 100) : 0;
    return `üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –Ω–µ–¥–µ–ª—é:\n–î–Ω–µ–π –ø–æ–ª–Ω–æ—Å—Ç—å—é: ${daysDone}\n–î–Ω–µ–π —á–∞—Å—Ç–∏—á–Ω–æ: ${daysPartial}\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: ${totalDone} –∏–∑ ${totalTasks} (${percent}%)`;
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
const bot = new Telegraf(BOT_TOKEN);

// --- –ö–æ–º–∞–Ω–¥—ã ---
bot.start(async ctx => {
    await initDB();
    await sendTodayChecklist(ctx, true);
});

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ ReplyKeyboard (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é) ---
bot.hears('üìã –ß–µ–∫-–ª–∏—Å—Ç', async ctx => {
    await sendTodayChecklist(ctx, false);
});
bot.hears('üìà –ü—Ä–æ–≥—Ä–µ—Å—Å', async ctx => {
    const text = getProgressText(ctx.from.id);
    await ctx.reply(text, mainMenu);
});
bot.hears('üí° –ú–æ—Ç–∏–≤–∞—Ü–∏—è', async ctx => {
    const quote = MOTIVATION_QUOTES[Math.floor(Math.random() * MOTIVATION_QUOTES.length)];
    await ctx.reply(`üí° –ú–æ—Ç–∏–≤–∞—Ü–∏—è:\n${quote}`, mainMenu);
});
bot.hears('‚ÑπÔ∏è –ü–æ–º–æ—â—å', async ctx => {
    await ctx.replyWithHTML(
`‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>

–≠—Ç–æ—Ç –±–æ—Ç ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è.

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
üìã –ß–µ–∫-–ª–∏—Å—Ç ‚Äî –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è  
üìà –ü—Ä–æ–≥—Ä–µ—Å—Å ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é  
üí° –ú–æ—Ç–∏–≤–∞—Ü–∏—è ‚Äî —Å–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞  
‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å  
‚ÑπÔ∏è –ü–æ–º–æ—â—å ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
‚Ä¢ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —á–µ–∫-–ª–∏—Å—Ç.
‚Ä¢ –û—Ç–º–µ—á–∞–π—Ç–µ –∑–∞–¥–∞—á–∏ –∫–Ω–æ–ø–∫–∞–º–∏ <b>‚úÖ</b> (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ) –∏–ª–∏ <b>üîÅ</b> (–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å).
‚Ä¢ –ë–æ—Ç —Å—á–∏—Ç–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –≤–µ–¥—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–µ–¥–µ–ª—è–º.
‚Ä¢ –ö–∞–∂–¥—ã–π —á–∞—Å ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∞ –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ ‚Äî –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç.

<b>–ú–æ—Ç–∏–≤–∞—Ü–∏—è:</b>
üí° –î–∞–∂–µ –æ–¥–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç ‚Äî —É–∂–µ —à–∞–≥ –∫ —Ä–∞–∑–≤–∏—Ç–∏—é!

–£–¥–∞—á–∏!`,
        mainMenu
    );
});
bot.hears('‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å', async ctx => {
    await ctx.reply(
        '–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å?',
        Markup.inlineKeyboard([
            [Markup.button.callback('‚úÖ –î–∞', 'reset_yes'), Markup.button.callback('‚ùå –ù–µ—Ç', 'reset_no')]
        ])
    );
});

// --- –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ ---
bot.action('reset_yes', async ctx => {
    db.data.users[ctx.from.id] = {};
    await db.write();
    await ctx.editMessageText('–ü—Ä–æ–≥—Ä–µ—Å—Å —É–¥–∞–ª—ë–Ω! üëç');
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainMenu);
    await ctx.answerCbQuery();
});
bot.action('reset_no', async ctx => {
    await ctx.editMessageText('–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.');
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainMenu);
    await ctx.answerCbQuery();
});

// --- –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ —á–µ–∫-–ª–∏—Å—Ç–∞ ---
bot.on('callback_query', async ctx => {
    if (!ctx.callbackQuery.data.startsWith('done_') && !ctx.callbackQuery.data.startsWith('skip_')) return;
    await initDB();
    const userId = ctx.from.id;
    const todayKey = getTodayKey();
    const idx = getWeekdayIndex();
    const user = db.data.users[userId] ||= {};
    user[todayKey] ||= { done: Array(WEEKLY_CHECKLIST[idx].tasks.length).fill(false) };

    const data = ctx.callbackQuery.data;
    if (data.startsWith('done_')) {
        const num = parseInt(data.split('_')[1]);
        user[todayKey].done[num] = true;
        await db.write();
        await ctx.answerCbQuery('–û—Ç–º–µ—á–µ–Ω–æ!');
        try {
            await ctx.editMessageReplyMarkup(getChecklistButtons(userId, idx).reply_markup);
        } catch (e) {
            if (!e.message.includes('message is not modified')) throw e;
        }
        await ctx.reply(getChecklistStatus(userId, idx));
    } else if (data.startsWith('skip_')) {
        await ctx.answerCbQuery('–ü—Ä–æ–ø—É—â–µ–Ω–æ!');
        try {
            await ctx.editMessageReplyMarkup(getChecklistButtons(userId, idx).reply_markup);
        } catch (e) {
            if (!e.message.includes('message is not modified')) throw e;
        }
    }
});

// --- –°—Ç–∞—Ç—É—Å —á–µ–∫–ª–∏—Å—Ç–∞ ---
function getChecklistStatus(userId, idx) {
    const todayKey = getTodayKey();
    const user = db.data.users[userId] ||= {};
    user[todayKey] ||= { done: Array(WEEKLY_CHECKLIST[idx].tasks.length).fill(false) };
    const done = user[todayKey].done.filter(Boolean).length;
    const total = WEEKLY_CHECKLIST[idx].tasks.length;
    const percent = Math.round(done / total * 100);
    return `–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${done} –∏–∑ ${total} (${percent}%)`;
}

// --- –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫–ª–∏—Å—Ç–∞ ---
async function sendTodayChecklist(ctx, showMenu = true) {
    const idx = getWeekdayIndex();
    const text = getChecklistText(idx);
    await ctx.reply(text, getChecklistButtons(ctx.from.id, idx));
    await ctx.reply(getChecklistStatus(ctx.from.id, idx));
    if (showMenu) await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainMenu);
}

// --- –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —á–µ–∫–ª–∏—Å—Ç–∞ ---
schedule.scheduleJob('0 8 * * *', async () => {
    await initDB();
    const users = Object.keys(db.data.users);
    for (const userId of users) {
        const idx = getWeekdayIndex();
        const text = getChecklistText(idx);
        await bot.telegram.sendMessage(userId, text, getChecklistButtons(userId, idx));
        await bot.telegram.sendMessage(userId, getChecklistStatus(userId, idx));
        await bot.telegram.sendMessage(userId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainMenu);
    }
});

// --- –ü–æ—á–∞—Å–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
schedule.scheduleJob('0 9-23,0-1 * * *', async () => {
    await initDB();
    const users = Object.keys(db.data.users);
    const reminders = [
        "üïê –£–∂–µ —á–∞—Å –ø—Ä–æ—à—ë–ª! –°–¥–µ–ª–∞–π —Ö–æ—Ç—è –±—ã 1 —à–∞–≥ –∏–∑ —á–µ–∫–ª–∏—Å—Ç–∞!",
        "üîî –ú–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ ‚Äî —Ç–æ–∂–µ –¥–≤–∏–∂–µ–Ω–∏–µ. –í—ã–ø–æ–ª–Ω–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ.",
        "‚è≥ –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —Å–≤–æ–π —á–µ–∫–ª–∏—Å—Ç ‚Äî –¥–∞–∂–µ 1 –ø—É–Ω–∫—Ç –≤–∞–∂–µ–Ω!",
        "üí™ –¢—ã –º–æ–∂–µ—à—å –±–æ–ª—å—à–µ, —á–µ–º –¥—É–º–∞–µ—à—å. –°–¥–µ–ª–∞–π —à–∞–≥ —Å–µ–π—á–∞—Å!"
    ];
    for (const userId of users) {
        await bot.telegram.sendMessage(userId, reminders[Math.floor(Math.random() * reminders.length)]);
    }
});

// --- –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç ---
schedule.scheduleJob('0 22 * * 0', async () => {
    await initDB();
    const users = Object.keys(db.data.users);
    for (const userId of users) {
        const text = getProgressText(userId);
        const quote = MOTIVATION_QUOTES[Math.floor(Math.random() * MOTIVATION_QUOTES.length)];
        await bot.telegram.sendMessage(userId, `üåü –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏:\n${text}\n\nüí° –ú–æ—Ç–∏–≤–∞—Ü–∏—è: ${quote}`);
    }
});

bot.launch();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));